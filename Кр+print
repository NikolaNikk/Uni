
#include <iostream>
using namespace std;

// Структура за елемент от опашка
struct elem {
    int key; // ключ за съхранение на стойността на елемента
    elem* next; // указател към следващия елемент в опашката
};

elem* first = NULL; // Указател към първия елемент от опашката
elem* last = NULL; // Указател към последния елемент от опашката

// Функция за добавяне на елемент към опашката
void push(int n) {
    elem* p = last; // Запазване на текущия последен елемент
    last = new elem; // Създаване на нов елемент
    last->key = n; // Записване на стойността в новия елемент
    last->next = NULL; // Настройване на указателя към следващия елемент като nullptr
    if (p != NULL)
        p->next = last; // Свързване на предходния последен елемент с новия последен елемент
    if (first == NULL) {
        first = last; // Ако опашката е празна, указателят към първия елемент става указател към новия елемент
    }
}

// Функция за изваждане на елемент от опашката
int pop(int &n) {
    if (first != NULL) {
        n = first->key; // Запазване на стойността на първия елемент
        elem* p = first; // Запазване на първия елемент
        first = first->next; // Преместване на указателя към следващия елемент
        delete p; // Изтриване на първия елемент
        return 1; // Връщане на статус успех
    } else {
        return 0; // Връщане на статус неуспех, ако опашката е празна
    }
}
void printQueue() {
    elem* printTemp = first;// Инициализация на променлива, която да покаже на текущия елемент
    cout << "Опашката: ";    // Принтиране на съобщение за опашката
    
    while (printTemp) { // Докато не стигнем до края на опашката
        cout << printTemp->key << " ";// Извеждаме стойността на текущия елемент
        printTemp = printTemp->next; // Продължаваме към следващия елемент
    }
    cout << endl;// Печатим нов ред, след като приключим с опашката
}
// Функция за намиране на позицията на даден елемент в редицата
int findPosition(int target) {
    int position = 1; // Инициализация на позицията на елемента
    int current; // Променлива за съхранение на текущия елемент
    elem* temp = first; // Указател за обхождане на опашката
    
    while (temp) {
        
        pop(current); // Вземане на първия елемент от опашката
        if (current == target) {
            cout << "Опашката след намирането на елемента " << target << " е: ";
            printQueue(); // Извикване на функцията за принтиране на опашката
            return position; // Ако елементът е търсеният, връща неговата позиция
        }
        position++; // Увеличаване на позицията
        push(current + 1); // Добавяне на следващия елемент в редицата към опашката
        push(current * 2); // Добавяне на следващия елемент в редицата към опашката
        temp = first; // Настройване на указателя за проверка на следващия елемент
    }
    return -1; // Ако елементът не е намерен в редицата
}

int main() {
    int N, element;
    // Въвеждане на началната стойност N от потребителя
    cout << "Въведете началната стойност N: ";
    cin >> N;
    // Въвеждане на елемента, който потребителят търси в редицата
    cout << "Въведете елемента, който търсите: ";
    cin >> element;
    // Добавяне на началната стойност в опашката
    push(N);
    // Намиране на позицията на търсения елемент в редицата и запазване на резултата в position
    int position = findPosition(element);
    // Извеждане на резултата - позицията на търсения елемент или съобщение, че той не е намерен
    if (position != -1) {
        cout << "Позицията на елемента " << element << " е: " << position << endl;
    } else {
        cout << "Елементът " << element << " не е намерен в редицата." << endl;
    }
    return 0;
}
